import tkinter as tk
import math

from sklearn.neighbors import NearestNeighbors
import numpy as np
import time

from UDPComms import Subscriber,timeout


scan1 = [[27, 354.4375, 389.5],
[27, 355.703125, 388.75],
[27, 356.90625, 388.5],
[22, 357.890625, 387.75],
[22, 358.9375, 387.75],
[22, 0.421875, 387.5],
[27, 1.359375, 388.5],
[27, 2.53125, 388.25],
[27, 3.859375, 389.0],
[27, 5.03125, 389.5],
[29, 6.140625, 390.0],
[28, 7.265625, 391.0],
[27, 8.5625, 392.75],
[27, 9.734375, 394.25],
[26, 10.5, 395.25],
[26, 11.890625, 397.0],
[24, 12.8125, 398.75],
[22, 14.125, 400.5],
[21, 15.625, 403.25],
[20, 16.53125, 406.0],
[23, 17.53125, 407.75],
[24, 18.671875, 412.25],
[21, 20.203125, 415.75],
[18, 21.25, 419.25],
[18, 22.40625, 424.0],
[17, 23.453125, 430.0],
[17, 24.453125, 433.5],
[16, 25.75, 440.25],
[16, 26.90625, 447.5],
[16, 27.75, 455.0],
[15, 29.0625, 462.25],
[16, 30.25, 471.5],
[14, 31.359375, 481.0],
[14, 32.265625, 491.25],
[15, 33.390625, 503.0],
[24, 37.484375, 687.25],
[16, 38.671875, 703.75],
[10, 40.828125, 492.25],
[10, 42.140625, 473.0],
[10, 43.484375, 456.0],
[10, 44.796875, 439.25],
[10, 45.9375, 424.75],
[10, 47.15625, 407.25],
[10, 48.78125, 393.5],
[13, 50.171875, 381.75],
[18, 51.453125, 374.5],
[21, 52.5625, 367.5],
[22, 53.515625, 361.75],
[25, 54.734375, 355.25],
[25, 56.515625, 349.0],
[27, 57.609375, 343.75],
[27, 58.609375, 339.25],
[26, 59.9375, 334.25],
[26, 61.046875, 329.5],
[28, 62.5, 325.0],
[25, 63.40625, 321.5],
[26, 65.078125, 317.5],
[26, 65.84375, 314.25],
[24, 67.78125, 310.75],
[27, 68.703125, 307.5],
[27, 69.90625, 304.75],
[28, 71.59375, 302.0],
[28, 72.6875, 300.0],
[26, 73.375, 297.5],
[30, 74.859375, 295.5],
[28, 76.3125, 293.5],
[26, 77.5, 291.75],
[27, 78.453125, 290.0],
[28, 79.765625, 288.75],
[24, 80.4375, 287.25],
[31, 82.140625, 286.25],
[24, 83.453125, 284.75],
[28, 84.484375, 284.0],
[29, 85.46875, 283.25],
[27, 86.765625, 282.75],
[29, 88.09375, 282.0],
[28, 89.78125, 281.75],
[28, 90.578125, 281.5],
[30, 92.046875, 281.5],
[28, 93.390625, 280.75],
[27, 94.046875, 281.0],
[28, 95.015625, 281.75],
[29, 96.625, 281.75],
[29, 97.53125, 282.25],
[28, 98.625, 282.75],
[28, 100.046875, 283.5],
[25, 101.328125, 284.25],
[31, 102.25, 285.5],
[31, 103.921875, 286.25],
[30, 105.0, 287.5],
[27, 106.59375, 289.0],
[26, 107.375, 290.5],
[27, 108.8125, 292.25],
[27, 109.5625, 293.75],
[30, 110.5625, 295.75],
[30, 111.90625, 297.75],
[28, 112.84375, 300.0],
[28, 114.203125, 302.0],
[26, 115.0625, 304.25],
[27, 116.859375, 307.25],
[25, 117.84375, 310.25],
[25, 118.5625, 313.0],
[28, 120.28125, 316.25],
[23, 121.40625, 319.75],
[26, 122.421875, 323.25],
[27, 123.578125, 327.25],
[26, 124.609375, 331.25],
[24, 125.453125, 336.0],
[28, 126.859375, 340.5],
[25, 127.953125, 345.25],
[25, 129.234375, 350.0],
[25, 130.375, 355.75],
[25, 131.328125, 361.5],
[24, 132.328125, 367.75],
[22, 133.5, 374.0],
[24, 134.71875, 381.0],
[20, 136.046875, 387.5],
[23, 137.203125, 395.0],
[22, 138.21875, 403.75],
[23, 139.1875, 412.5],
[20, 140.53125, 422.0],
[21, 141.296875, 432.75],
[19, 142.546875, 443.5],
[14, 143.625, 456.25],
[13, 149.375, 3231.25],
[11, 150.546875, 3367.75],
[11, 151.75, 3485.25],
[9, 152.921875, 3621.75],
[9, 154.09375, 3793.75],
[18, 155.59375, 3214.25],
[14, 157.96875, 3509.25],
[20, 165.3125, 3028.5],
[16, 166.46875, 3353.0],
[10, 168.671875, 6705.0],
[13, 174.71875, 6966.0],
[9, 179.234375, 1362.0],
[11, 180.46875, 1318.25],
[13, 181.703125, 1279.75],
[17, 182.984375, 1251.5],
[19, 184.171875, 1220.5],
[17, 185.40625, 1199.25],
[17, 186.703125, 1177.25],
[14, 191.515625, 1207.5],
[20, 192.765625, 1113.75],
[16, 194.03125, 1096.5],
[26, 195.25, 1081.25],
[10, 196.71875, 879.0],
[12, 199.453125, 788.75],
[13, 200.515625, 789.5],
[9, 201.828125, 803.5],
[10, 202.984375, 789.75],
[10, 204.390625, 792.75],
[12, 205.640625, 795.5],
[16, 206.96875, 796.0],
[17, 208.140625, 804.0],
[20, 209.40625, 812.0],
[10, 210.578125, 830.25],
[10, 211.765625, 847.0],
[11, 212.9375, 857.0],
[10, 215.046875, 1012.75],
[9, 216.375, 993.0],
[10, 217.65625, 966.75],
[11, 218.9375, 942.0],
[11, 222.390625, 1068.25],
[13, 223.609375, 1034.75],
[11, 231.703125, 728.0],
[14, 232.96875, 707.0],
[15, 234.09375, 692.25],
[14, 235.40625, 675.75],
[15, 236.75, 662.75],
[14, 238.046875, 647.0],
[14, 239.3125, 638.0],
[14, 240.53125, 624.0],
[15, 241.75, 614.75],
[14, 243.203125, 604.0],
[16, 244.390625, 595.5],
[16, 245.6875, 587.0],
[18, 246.90625, 580.5],
[21, 248.078125, 574.75],
[22, 249.375, 569.5],
[24, 250.5625, 565.25],
[24, 251.96875, 561.0],
[24, 253.25, 556.75],
[24, 254.421875, 554.0],
[24, 255.8125, 550.5],
[24, 257.03125, 547.25],
[23, 258.28125, 545.5],
[24, 259.40625, 543.0],
[24, 260.734375, 541.25],
[23, 262.03125, 538.5],
[24, 263.25, 536.5],
[22, 264.265625, 535.75],
[24, 265.78125, 534.75],
[24, 266.796875, 534.75],
[24, 267.984375, 534.25],
[24, 269.359375, 534.5],
[25, 270.5625, 534.0],
[25, 271.953125, 534.75],
[25, 273.125, 535.25],
[23, 274.3125, 536.25],
[25, 275.546875, 538.25],
[23, 276.90625, 540.25],
[21, 278.25, 542.0],
[19, 279.453125, 544.25],
[19, 280.703125, 547.25],
[17, 281.796875, 551.5],
[16, 283.109375, 557.75],
[16, 284.140625, 563.5],
[15, 285.484375, 569.75],
[13, 286.671875, 578.0],
[16, 287.90625, 585.5],
[17, 289.0625, 595.75],
[14, 290.328125, 604.0],
[13, 291.515625, 612.75],
[16, 296.609375, 1103.0],
[12, 297.890625, 1088.75],
[12, 299.046875, 1108.75],
[13, 300.390625, 1066.5],
[14, 301.65625, 1021.5],
[17, 302.96875, 990.75],
[15, 304.28125, 955.25],
[17, 305.59375, 924.5],
[15, 306.890625, 899.5],
[17, 308.203125, 870.75],
[19, 309.40625, 842.5],
[20, 310.765625, 820.75],
[15, 313.953125, 591.5],
[15, 315.140625, 574.0],
[16, 316.53125, 559.0],
[15, 317.90625, 544.75],
[15, 319.21875, 531.5],
[16, 320.609375, 520.0],
[17, 321.671875, 509.25],
[16, 323.015625, 497.0],
[16, 324.546875, 486.5],
[16, 325.875, 478.5],
[16, 327.40625, 470.25],
[17, 328.6875, 460.0],
[16, 330.0, 453.0],
[16, 331.234375, 446.25],
[18, 332.546875, 439.5],
[19, 333.765625, 434.0],
[20, 335.296875, 429.0],
[21, 336.546875, 423.25],
[23, 337.875, 418.75],
[23, 339.109375, 415.0],
[24, 340.15625, 412.0],
[23, 341.40625, 408.75],
[22, 342.734375, 405.75],
[25, 344.21875, 403.0],
[27, 345.578125, 400.25],
[27, 346.859375, 398.5],
[28, 347.90625, 396.5],
[28, 349.421875, 394.5],
[28, 350.71875, 393.25],
[30, 351.953125, 392.0],
[29, 353.015625, 390.25]]


scan2 = [[22, 352.890625, 410.5],
[21, 355.1875, 409.25],
[22, 357.21875, 410.75],
[21, 359.75, 412.0],
[20, 1.71875, 415.5],
[20, 4.046875, 417.75],
[19, 6.234375, 422.75],
[19, 8.59375, 429.25],
[20, 10.609375, 435.25],
[19, 12.890625, 443.25],
[22, 23.078125, 617.5],
[26, 25.40625, 631.25],
[25, 27.53125, 644.0],
[25, 29.75, 658.0],
[9, 33.5, 380.25],
[11, 36.125, 342.0],
[11, 39.40625, 314.75],
[10, 41.515625, 289.0],
[10, 44.953125, 266.5],
[10, 47.28125, 245.75],
[13, 49.515625, 234.5],
[17, 53.40625, 223.25],
[21, 55.171875, 216.5],
[24, 57.9375, 209.5],
[27, 59.40625, 204.0],
[27, 62.453125, 198.5],
[30, 64.71875, 193.75],
[28, 66.78125, 190.0],
[29, 69.0, 186.5],
[29, 71.25, 183.5],
[31, 73.484375, 181.0],
[27, 75.734375, 179.0],
[29, 77.96875, 177.0],
[30, 80.21875, 175.5],
[31, 82.453125, 174.25],
[31, 84.6875, 173.25],
[31, 86.9375, 173.0],
[30, 89.171875, 172.5],
[30, 96.015625, 173.75],
[30, 98.265625, 174.5],
[29, 100.515625, 175.5],
[29, 102.75, 177.0],
[27, 105.0, 179.0],
[29, 107.25, 180.75],
[27, 109.5, 183.0],
[30, 111.765625, 185.75],
[29, 113.9375, 188.75],
[27, 116.171875, 192.0],
[28, 118.421875, 195.75],
[27, 120.65625, 199.75],
[26, 122.484375, 204.25],
[26, 125.140625, 209.25],
[26, 127.375, 214.75],
[26, 128.359375, 221.25],
[23, 130.21875, 228.0],
[24, 132.625, 235.75],
[25, 135.84375, 244.0],
[23, 137.421875, 253.25],
[23, 138.421875, 263.5],
[17, 140.40625, 276.5],
[15, 221.375, 4292.25],
[11, 223.640625, 4140.25],
[14, 225.921875, 3985.75],
[9, 229.265625, 1013.75],
[14, 234.21875, 767.5],
[13, 236.5625, 747.0],
[14, 238.75, 728.0],
[15, 241.046875, 713.0],
[15, 243.515625, 698.0],
[15, 245.8125, 686.75],
[14, 247.921875, 673.0],
[15, 250.234375, 665.5],
[15, 252.625, 658.0],
[15, 254.96875, 648.5],
[18, 257.21875, 645.5],
[18, 259.375, 640.75],
[16, 261.609375, 638.0],
[18, 263.90625, 637.0],
[20, 266.234375, 636.25],
[20, 268.484375, 635.25],
[19, 270.71875, 636.5],
[16, 273.0625, 639.0],
[16, 275.1875, 643.75],
[15, 277.4375, 650.25],
[14, 279.78125, 655.0],
[16, 282.109375, 662.5],
[25, 284.34375, 669.25],
[17, 286.421875, 686.5],
[15, 288.75, 707.0],
[14, 294.609375, 1200.5],
[19, 297.046875, 1107.0],
[16, 299.359375, 1040.0],
[17, 301.625, 979.75],
[13, 304.4375, 697.75],
[14, 306.90625, 655.0],
[14, 309.125, 619.25],
[15, 311.515625, 589.75],
[16, 313.921875, 564.25],
[15, 316.40625, 541.25],
[17, 318.8125, 519.75],
[19, 321.109375, 502.25],
[20, 323.484375, 486.75],
[20, 325.84375, 474.75],
[22, 328.109375, 462.5],
[23, 330.453125, 451.75],
[21, 332.84375, 444.5],
[23, 335.234375, 436.5],
[23, 337.453125, 430.0],
[22, 339.96875, 423.5],
[23, 342.0, 418.5],
[23, 344.28125, 414.5],
[24, 346.78125, 411.75],
[21, 349.0625, 409.75],
[21, 351.265625, 408.5]]
[[20, 353.4375, 408.75],
[20, 355.890625, 408.5],
[20, 357.84375, 409.75],
[22, 0.375, 412.25],
[21, 2.625, 415.75],
[19, 4.84375, 418.75],
[18, 6.984375, 426.0],
[19, 8.96875, 432.75],
[19, 11.34375, 440.25],
[26, 23.828125, 627.0],
[25, 26.03125, 639.75],
[26, 28.078125, 653.5],
[10, 32.0625, 365.25],
[11, 34.53125, 342.0],
[10, 37.265625, 314.25],
[9, 40.6875, 292.75],
[10, 43.765625, 260.75],
[10, 45.40625, 244.75],
[15, 48.09375, 233.5],
[18, 51.828125, 223.25],
[21, 54.078125, 216.0],
[25, 56.34375, 209.25],
[28, 58.609375, 203.25],
[28, 60.875, 198.0],
[30, 62.8125, 193.5],
[26, 65.40625, 189.25],
[32, 67.484375, 185.75],
[29, 69.75, 182.5],
[32, 71.984375, 180.0],
[28, 74.234375, 177.75],
[25, 76.484375, 175.75],
[31, 78.71875, 174.5],
[31, 80.96875, 173.0],
[27, 83.71875, 172.25],
[28, 85.953125, 171.5],
[35, 88.203125, 170.75],
[28, 95.078125, 172.0],
[30, 96.84375, 173.0],
[31, 99.109375, 174.0],
[29, 101.375, 175.25],
[29, 103.609375, 177.0],
[27, 105.875, 179.0],
[29, 108.125, 181.25],
[27, 110.390625, 183.75],
[27, 112.640625, 186.75],
[26, 114.84375, 190.0],
[28, 117.09375, 193.75],
[27, 119.359375, 197.5],
[24, 121.03125, 202.0],
[28, 123.859375, 206.75],
[24, 126.09375, 212.0],
[26, 128.359375, 218.0],
[27, 129.28125, 225.0],
[25, 131.421875, 232.25],
[26, 134.96875, 240.25],
[23, 136.671875, 249.25],
[22, 137.25, 259.25],
[22, 140.34375, 270.25],
[15, 222.609375, 4183.5],
[12, 224.890625, 4091.75],
[13, 228.1875, 1000.5],
[14, 230.4375, 1001.5],
[21, 233.09375, 772.75],
[14, 235.546875, 754.25],
[13, 237.828125, 731.0],
[14, 240.078125, 718.5],
[15, 242.40625, 704.0],
[15, 244.65625, 689.5],
[15, 246.96875, 678.75],
[16, 249.3125, 668.0],
[15, 251.59375, 660.0],
[15, 253.828125, 652.5],
[16, 256.109375, 646.5],
[17, 258.265625, 641.5],
[18, 260.625, 639.75],
[20, 262.84375, 638.0],
[19, 265.15625, 637.0],
[22, 267.484375, 637.5],
[18, 269.75, 638.0],
[18, 272.03125, 638.5],
[16, 274.125, 643.0],
[15, 276.390625, 647.25],
[15, 278.734375, 655.25],
[15, 281.015625, 662.5],
[24, 283.203125, 666.0],
[18, 285.46875, 678.25],
[16, 287.578125, 701.0],
[15, 289.8125, 728.0],
[16, 295.8125, 1134.25],
[16, 298.203125, 1060.0],
[22, 300.484375, 991.75],
[14, 303.296875, 712.75],
[14, 305.71875, 665.25],
[15, 308.15625, 626.0],
[15, 310.421875, 595.75],
[15, 312.703125, 568.0],
[17, 315.25, 543.5],
[19, 317.5, 523.25],
[23, 319.921875, 506.0],
[23, 322.15625, 491.25],
[23, 324.71875, 477.25],
[23, 327.078125, 466.0],
[25, 329.4375, 455.75],
[25, 331.875, 446.5],
[28, 334.171875, 438.5],
[29, 336.53125, 431.75],
[28, 338.640625, 425.5],
[24, 340.96875, 420.5],
[24, 343.296875, 415.0],
[26, 345.65625, 412.5],
[24, 347.890625, 409.0],
[23, 349.984375, 407.0]]


class Transform:
    def __init__(self, matrix):
        self.matrix = matrix

    @classmethod
    def fromOdometry(cls, angle, xy):
        matrix = np.eye(3)
        matrix[0,0] = np.cos(angle); matrix[0,1] =-np.sin(angle)
        matrix[1,0] = np.sin(angle); matrix[1,1] = np.cos(angle)
        matrix[:2,2] = xy

        return cls(matrix)

    @classmethod
    def fromComponents(cls, angle, xy = None):
        if xy == None:
            xy = np.zeros((2))
        else:
            xy = np.array(xy)
        return cls.fromOdometry(np.radians(angle), xy)

    def combine(self, other):
        return Transform(self.matrix @ other.matrix)

    def inv(self):
        R = self.matrix[:2, :2]
        matrix = np.eye(3)
        matrix[:2,:2] = np.linalg.inv(R)
        matrix[:2,2]  = np.linalg.inv(R) @ self.matrix[:2, 2]
        return Transform(matrix)

class Robot:
    def __init__(self, xy = (0,0), angle = 0):
        self.tranform = Transform.fromComponents(angle, xy)

    def drive(self, tranform):
        #local move
        self.tranform = self.tranform.combine(tranform)

    def move(self, tranform):
        #global move
        self.tranform = tranform.combine(self.tranform)

    def get_transform(self):
        return self.tranform

    def get_pose(self):
        pos = np.array([0,0,1])
        head = np.array([0,1,1])

        pos  = self.tranform.matrix @ pos
        head = self.tranform.matrix @ head - pos
        return (pos[:2], head[:2])

class PointCloud:
    def __init__(self, array):
        self.points = array

    def copy(self):
        return PointCloud(self.points.copy())

    @classmethod
    def fromScan(cls, scan):
        # from y axis clockwise
        scan = np.array(scan)
        angles = np.radians(scan[:,1])
        dists = scan[:,2]
        array = np.stack([dists*np.sin(angles), dists*np.cos(angles), np.ones(angles.shape)], axis=-1)
        return cls( array )

    def move(self, tranform):
        # print("matrix", tranform.matrix.shape)
        # print("self", self.points.shape)
        return PointCloud( (tranform.matrix @ self.points.T).T )

    def extend(self, other):
        MIN_DIST = 80

        nbrs = NearestNeighbors(n_neighbors=1).fit(self.points)
        distances, indices = nbrs.kneighbors(other.points)

        distances = np.squeeze(distances)
        matched_other = other.points[distances > MIN_DIST, :]
        return PointCloud( np.vstack( (self.points, matched_other) ))

    def fitICP(self, other):
        # TODO: better way of terminating
        transform = Transform.fromComponents(0)
        for itereation in range(50):
            aligment = self.AlignSVD(other)
            # print("aligment", aligment.matrix)
            other = other.move(aligment)
            transform = aligment.combine(transform)

            dist = np.sum(aligment.matrix[:2, 2] **2)
            x,y = aligment.matrix[:2,:2] @ np.array([1,0])
            angle = np.arctan2(y,x)

            if( angle < 0.01 and dist < 5 ):
                print("done", itereation)
                break
        else:
            print("convergence failure!")
            return None, None

        return other, transform

    def AlignSVD(self, other):
        # other is the one moving
        MAX_DIST = 250

        # print("self", np.where(np.isnan(self.points)) )
        # print("other", np.where(np.isnan(other.points)) )
        # print("other", other.points )

        # keep around
        nbrs = NearestNeighbors(n_neighbors=1).fit(self.points)
        distances, indices = nbrs.kneighbors(other.points)

        distances = np.squeeze(distances)
        indices = np.squeeze(indices)

        # print("distances:", distances.shape)
        # print("indices:", indices.shape)
        # print("other:", other.points.shape)

        matched_indes = indices[distances <= MAX_DIST]
        matched_other = other.points[distances <= MAX_DIST, :]
        matched_self  = self.points[matched_indes, :]

        mean_dist = np.mean(distances[distances <= MAX_DIST])

        self_mean = np.mean(matched_self, axis=0)
        other_mean = np.mean(matched_other, axis=0)

        if matched_self.shape[0] == 0:
            return Transform(np.eye(3))

        matched_self = matched_self- self_mean
        matched_other = matched_other - other_mean

        M = np.dot(matched_other.T,matched_self)
        U,W,V_t = np.linalg.svd(M)

        R = np.dot(V_t.T,U.T)

        #consequence of homogeneous coordinates
        assert R[0,2] == 0
        assert R[1,2] == 0
        assert R[2,2] == 1
        assert R[2,0] == 0
        assert R[2,1] == 0
        
        t = self_mean - other_mean
        R[:2,2] = t[:2]
        
        return Transform(R)


class Vizualizer(tk.Tk):
    def __init__(self, size = 1000, mm_per_pix = 5):
        super().__init__()
        self.SIZE = size
        self.MM_PER_PIX = mm_per_pix

        self.canvas = tk.Canvas(self,width=self.SIZE,height=self.SIZE)
        self.canvas.pack()

        self.robot = []
        self.point_cloud = []
        
    def clear_PointCloud(self):
        for obj in self.point_cloud:
            self.canvas.delete(obj)

    def plot_PointCloud(self, pc, c='#000000'):
        for x, y,_ in pc.points:
            self.point_cloud.append(self.create_point(x, y, c=c))

    def plot_Robot(self, robot):
        pos, head = robot.get_pose()
        # print("pos", pos)
        # print("head", head)

        head *= 20

        for obj in self.robot:
            self.canvas.delete(obj)

        arrow = self.canvas.create_line(self.SIZE/2 + pos[0]/self.MM_PER_PIX,
                           self.SIZE/2 - pos[1]/self.MM_PER_PIX,
                           self.SIZE/2 + pos[0]/self.MM_PER_PIX + head[0],
                           self.SIZE/2 - pos[1]/self.MM_PER_PIX - head[1],
                           arrow=tk.LAST)

        oval = self.canvas.create_oval(self.SIZE/2+5 + pos[0]/self.MM_PER_PIX, 
                                self.SIZE/2+5 - pos[1]/self.MM_PER_PIX,
                                self.SIZE/2-5 + pos[0]/self.MM_PER_PIX,
                                self.SIZE/2-5 - pos[1]/self.MM_PER_PIX,
                                fill = '#FF0000')

        self.robot = [arrow,oval]

    def create_point(self,x,y, c = '#000000', w= 1):
        return self.canvas.create_oval(self.SIZE/2 + x/self.MM_PER_PIX,
                                self.SIZE/2 - y/self.MM_PER_PIX,
                                self.SIZE/2 + x/self.MM_PER_PIX,
                                self.SIZE/2 - y/self.MM_PER_PIX, width = w, fill = c, outline = c)




class SLAM:
    def __init__(self):
        self.viz = Vizualizer()

        self.odom  = Subscriber(8810, timeout=0.5)
        self.lidar = Subscriber(8110, timeout=0.5)

        self.robot = Robot()
        self.update_time = time.time()
        self.dt = None

        self.scan = None

        self.viz.after(100,self.update)
        self.viz.mainloop()


    def update(self):
        self.dt = time.time() - self.update_time
        self.update_time = time.time()
        print("dt", self.dt)

        self.update_odom()
        self.update_lidar()

        loop_time = 1000 * (time.time() - self.update_time)
        self.viz.after( int(max(100 - loop_time, 0)) , self.update)

    def update_odom(self):
        try:
            da, dy = self.odom.get()['single']['odom']
            da *= self.dt
            dy *= self.dt

            t = Transform.fromOdometry(da, (0,dy))
            self.robot.drive(t)
            self.viz.plot_Robot(self.robot)
        except timeout:
            pass

    def update_lidar(self):
        try:
            scan = self.lidar.get()
            # print("scan", scan)
            pc = PointCloud.fromScan(scan)

            # lidar in robot frame
            pc = pc.move(Transform.fromComponents(0, (0,0) ))

            pc = pc.move( self.robot.get_transform() )

            if(self.scan == None):
                self.scan = pc
                self.viz.plot_PointCloud(self.scan)
            else:
                self.viz.clear_PointCloud()
                self.viz.plot_PointCloud(self.scan)
                # self.viz.plot_PointCloud(pc, c="blue")

                cloud, transform = self.scan.fitICP(pc)
                if transform is not None:
                    self.viz.plot_PointCloud(cloud, c="green")
                    self.robot.move(transform)
                    self.scan = self.scan.extend( cloud )



        except timeout:
            pass


if __name__ == "__main__":
    s = SLAM()

    # v = Vizualizer()
    # s1 = PointCloud.fromScan(scan1).move(Transform.fromComponents(0, (400,0)))
    # s2 = PointCloud.fromScan(scan2).move(Transform.fromComponents(15, (400,0)))

    # v.plot_PointCloud(s1)
    # v.plot_PointCloud(s2, c="blue")

    # s3, transform = s1.fitICP(s2)
    # # v.plot_PointCloud(s3, c="green")

    # s4 = s2.move(transform)
    # v.plot_PointCloud(s4, c="green")

    # v.mainloop()


